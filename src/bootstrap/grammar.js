/* parser generated by jison 0.4.6 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"file":3,"list":4,"EOF":5,"expression":6,"IDENT":7,"STRING":8,"NUMBER":9,"lambda":10,"begin":11,"cond":12,"define":13,"if":14,"let":15,"letrec":16,"set":17,"switch":18,"attribute":19,"method":20,"sexpr":21,"list_literal":22,"quote_ident":23,"obj_literal":24,"SPECIAL_IDENT":25,"identifier":26,"special_ident":27,"string":28,"number":29,"dot_ident":30,"DOT_IDENT":31,"(":32,")":33,"[":34,"]":35,"key_value_pair":36,":":37,"kv_pair_list":38,"{":39,"}":40,"QUOTE":41,"identifier_list":42,"wrapped_identifier_list":43,"LAMBDA":44,"BEGIN":45,"cond_pair":46,"cond_pair_list":47,"COND":48,"DEFINE":49,"IF":50,"let_pair":51,"let_list":52,"LET":53,"LETREC":54,"SET":55,"switch_pair":56,"default_pair":57,"DEFAULT":58,"switch_list":59,"SWITCH":60,"thunk":61,"THUNK":62,"CRUNCH":63,"DOT":64,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"IDENT",8:"STRING",9:"NUMBER",16:"letrec",25:"SPECIAL_IDENT",31:"DOT_IDENT",32:"(",33:")",34:"[",35:"]",37:":",39:"{",40:"}",41:"QUOTE",44:"LAMBDA",45:"BEGIN",48:"COND",49:"DEFINE",50:"IF",53:"LET",54:"LETREC",55:"SET",58:"DEFAULT",60:"SWITCH",62:"THUNK",63:"CRUNCH",64:"DOT"},
productions_: [0,[3,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[26,1],[27,1],[28,1],[29,1],[30,1],[4,2],[4,1],[21,3],[21,2],[22,3],[22,2],[36,3],[36,3],[36,3],[38,2],[38,1],[24,3],[24,2],[23,2],[42,1],[42,2],[43,3],[10,5],[11,4],[46,4],[47,1],[47,2],[12,4],[13,5],[14,6],[51,4],[52,1],[52,2],[15,6],[15,7],[15,6],[15,7],[17,5],[17,6],[56,4],[57,4],[59,1],[59,2],[18,6],[61,4],[19,5],[20,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: this.$ = mkNode('identifier', $$[$0], _$[$0])                    
break;
case 3: this.$ = mkNode('string', $$[$0], _$[$0])                      
break;
case 4: this.$ = mkNode('number', $$[$0], _$[$0])                      
break;
case 5: this.$ = $$[$0]                                                 
break;
case 6: this.$ = $$[$0]                                                  
break;
case 7: this.$ = $$[$0]                                                   
break;
case 8: this.$ = $$[$0]                                                 
break;
case 9: this.$ = $$[$0]                                                     
break;
case 10: this.$ = $$[$0]                                                    
break;
case 11: this.$ = $$[$0]                                                 
break;
case 12: this.$ = $$[$0]                                                    
break;
case 13: this.$ = $$[$0]                                                 
break;
case 14: this.$ = $$[$0]                                              
break;
case 15: this.$ = $$[$0]                                                 
break;
case 16: this.$ = $$[$0]                                                  
break;
case 17: this.$ = $$[$0]                                           
break;
case 18: this.$ = $$[$0]                                            
break;
case 19: this.$ = $$[$0]                                            
break;
case 20: this.$ = mkNode('special_ident', $$[$0], _$[$0]) 
break;
case 21: this.$ = mkNode('identifier', $$[$0], _$[$0])                    
break;
case 22: this.$ = mkNode('special_ident', $$[$0], _$[$0]) 
break;
case 23: this.$ = mkNode('string', $$[$0], _$[$0])                      
break;
case 24: this.$ = mkNode('number', $$[$0], _$[$0])                      
break;
case 25: this.$ = mkNode('dot_identifier', $$[$0], _$[$0])
break;
case 26: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 27: this.$ = [$$[$0]];               
break;
case 28: this.$ = mkNode('sexpr', $$[$0-1], _$[$0-2], _$[$0] ) 
break;
case 29: this.$ = mkNode('sexpr', [], _$[$0-1], _$[$0])     
break;
case 30: this.$ = mkNode('list', $$[$0-1], _$[$0-2], _$[$0])       
break;
case 31: this.$ = mkNode('list', emptyList(), _$[$0-1], _$[$0]) 
break;
case 32:this.$ = mkNode('key_value', mkPair(mkNode('identifier', $$[$0-2], _$[$0-2]), $$[$0]), _$[$0-2], _$[$0]) 
break;
case 33:this.$ = mkNode('key_value', mkPair($$[$0-2], $$[$0]), _$[$0-2], _$[$0])
break;
case 34:this.$ = mkNode('key_value', mkPair( mkNode('string', $$[$0-2], _$[$0-2]), $$[$0]), _$[$0-2], _$[$0])
break;
case 35:
                this.$ = $$[$0-1], this.$.push($$[$0]);
               
break;
case 36:
                this.$ = [$$[$0]];
               
break;
case 37: this.$ = mkNode('obj_lit', $$[$0-1], _$[$0-2], _$[$0]) 
break;
case 38:  this.$ = mkNode('obj_lit', emptyList(), _$[$0-1], _$[$0])  
break;
case 39:this.$ = mkNode('quote_ident', $$[$0], _$[$0-1], _$[$0])
break;
case 40: this.$ = [mkNode('identifier', $$[$0], _$[$0])];                      
break;
case 41: this.$ = $$[$0-1]; this.$.push(mkNode('identifier', $$[$0], _$[$0])); 
break;
case 42: this.$ = mkNode('identifier_list', $$[$0-1], _$[$0-2], _$[$0]) 
break;
case 43: this.$ = mkSpecial('lambda', {vars: $$[$0-2].value, exprs: $$[$0-1]}, _$[$0-4], _$[$0]) 
break;
case 44: this.$ = mkSpecial('begin',{exprs: $$[$0-1]}, _$[$0-3], _$[$0]) 
break;
case 45: this.$ = mkSpecial('cond_pair', {l: $$[$0-2], r: $$[$0-1]}, _$[$0-3], _$[$0]) 
break;
case 46: this.$ = [$$[$0]]; 
break;
case 47: this.$ = $$[$0-1]; this.$.push($$[$0]) 
break;
case 48: this.$ = mkSpecial('cond', {pairs: $$[$0-1]}, _$[$0-3], _$[$0]) 
break;
case 49: this.$ = mkSpecial('define', {l: mkNode('identifier', $$[$0-2], _$[$0-2]), r: $$[$0-1]}, _$[$0-4], _$[$0]) 
break;
case 50: this.$ = mkSpecial('if', {cond: $$[$0-3], thn: $$[$0-2], els: $$[$0-1]}, _$[$0-5], _$[$0]) 
break;
case 51: this.$ = mkSpecial('let_pair', {l: $$[$0-2], r: $$[$0-1]}, _$[$0-3], _$[$0]) 
break;
case 52: this.$ = [$$[$0]]                  
break;
case 53: this.$ = $$[$0-1]; this.$.push($$[$0]) 
break;
case 54: this.$ = mkSpecial('let', {pairs: [], exprs: $$[$0-1]},_$[$0-5], _$[$0])        
break;
case 55: this.$ = mkSpecial('let', {pairs: $$[$0-3], exprs:$$[$0-1]}, _$[$0-6], _$[$0]) 
break;
case 56: this.$ = mkSpecial('letrec', {pairs: [], exprs: $$[$0-1]},_$[$0-5], _$[$0])        
break;
case 57: this.$ = mkSpecial('letrec', {pairs: $$[$0-3], exprs:$$[$0-1]}, _$[$0-6], _$[$0]) 
break;
case 58: this.$ = mkSpecial('set', {ident: $$[$0-2], value: $$[$0-1]},  _$[$0-4], _$[$0])  
break;
case 59: this.$ = mkSpecial('setp', {ident: $$[$0-3], obj: $$[$0-2], value: $$[$0-1] }, _$[$0-5], _$[$0]) 
break;
case 60: this.$ = mkSpecial('switch_pair', {l: $$[$0-2], r: $$[$0-1] }, _$[$0-3], _$[$0]) 
break;
case 61: this.$ = mkSpecial('default_pair', {expr: $$[$0-1]}, _$[$0-3], _$[$0])
break;
case 62: this.$ = [$$[$0]]                       
break;
case 63: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 64: this.$ = mkSpecial('switch', {expr: $$[$0-3], pairs: $$[$0-2], default: $$[$0-1]}, _$[$0-5], _$[$0])
break;
case 65: this.$ = mkSpecial('thunk', {exprs: $$[$0-1]}, _$[$0-3], _$[$0])
break;
case 66: this.$ = mkSpecial('attribute', {attr: $$[$0-2], expr: $$[$0-1]},_$[$0-4], _$[$0]) 
break;
case 67: this.$ = mkSpecial('method', {name: $$[$0-3], expr: $$[$0-2], args: $$[$0-1]}, _$[$0-5], _$[$0] )
break;
}
},
table: [{3:1,4:2,6:3,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],34:[1,24],39:[1,26],41:[1,25]},{1:[3]},{5:[1,27],6:28,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],34:[1,24],39:[1,26],41:[1,25]},{5:[2,27],7:[2,27],8:[2,27],9:[2,27],16:[2,27],25:[2,27],32:[2,27],33:[2,27],34:[2,27],35:[2,27],39:[2,27],41:[2,27]},{5:[2,2],7:[2,2],8:[2,2],9:[2,2],16:[2,2],25:[2,2],32:[2,2],33:[2,2],34:[2,2],35:[2,2],39:[2,2],40:[2,2],41:[2,2]},{5:[2,3],7:[2,3],8:[2,3],9:[2,3],16:[2,3],25:[2,3],32:[2,3],33:[2,3],34:[2,3],35:[2,3],39:[2,3],40:[2,3],41:[2,3]},{5:[2,4],7:[2,4],8:[2,4],9:[2,4],16:[2,4],25:[2,4],32:[2,4],33:[2,4],34:[2,4],35:[2,4],39:[2,4],40:[2,4],41:[2,4]},{5:[2,5],7:[2,5],8:[2,5],9:[2,5],16:[2,5],25:[2,5],32:[2,5],33:[2,5],34:[2,5],35:[2,5],39:[2,5],40:[2,5],41:[2,5]},{5:[2,6],7:[2,6],8:[2,6],9:[2,6],16:[2,6],25:[2,6],32:[2,6],33:[2,6],34:[2,6],35:[2,6],39:[2,6],40:[2,6],41:[2,6]},{5:[2,7],7:[2,7],8:[2,7],9:[2,7],16:[2,7],25:[2,7],32:[2,7],33:[2,7],34:[2,7],35:[2,7],39:[2,7],40:[2,7],41:[2,7]},{5:[2,8],7:[2,8],8:[2,8],9:[2,8],16:[2,8],25:[2,8],32:[2,8],33:[2,8],34:[2,8],35:[2,8],39:[2,8],40:[2,8],41:[2,8]},{5:[2,9],7:[2,9],8:[2,9],9:[2,9],16:[2,9],25:[2,9],32:[2,9],33:[2,9],34:[2,9],35:[2,9],39:[2,9],40:[2,9],41:[2,9]},{5:[2,10],7:[2,10],8:[2,10],9:[2,10],16:[2,10],25:[2,10],32:[2,10],33:[2,10],34:[2,10],35:[2,10],39:[2,10],40:[2,10],41:[2,10]},{5:[2,11],7:[2,11],8:[2,11],9:[2,11],16:[2,11],25:[2,11],32:[2,11],33:[2,11],34:[2,11],35:[2,11],39:[2,11],40:[2,11],41:[2,11]},{5:[2,12],7:[2,12],8:[2,12],9:[2,12],16:[2,12],25:[2,12],32:[2,12],33:[2,12],34:[2,12],35:[2,12],39:[2,12],40:[2,12],41:[2,12]},{5:[2,13],7:[2,13],8:[2,13],9:[2,13],16:[2,13],25:[2,13],32:[2,13],33:[2,13],34:[2,13],35:[2,13],39:[2,13],40:[2,13],41:[2,13]},{5:[2,14],7:[2,14],8:[2,14],9:[2,14],16:[2,14],25:[2,14],32:[2,14],33:[2,14],34:[2,14],35:[2,14],39:[2,14],40:[2,14],41:[2,14]},{5:[2,15],7:[2,15],8:[2,15],9:[2,15],16:[2,15],25:[2,15],32:[2,15],33:[2,15],34:[2,15],35:[2,15],39:[2,15],40:[2,15],41:[2,15]},{5:[2,16],7:[2,16],8:[2,16],9:[2,16],16:[2,16],25:[2,16],32:[2,16],33:[2,16],34:[2,16],35:[2,16],39:[2,16],40:[2,16],41:[2,16]},{5:[2,17],7:[2,17],8:[2,17],9:[2,17],16:[2,17],25:[2,17],32:[2,17],33:[2,17],34:[2,17],35:[2,17],39:[2,17],40:[2,17],41:[2,17]},{5:[2,18],7:[2,18],8:[2,18],9:[2,18],16:[2,18],25:[2,18],32:[2,18],33:[2,18],34:[2,18],35:[2,18],39:[2,18],40:[2,18],41:[2,18]},{5:[2,19],7:[2,19],8:[2,19],9:[2,19],16:[2,19],25:[2,19],32:[2,19],33:[2,19],34:[2,19],35:[2,19],39:[2,19],40:[2,19],41:[2,19]},{5:[2,20],7:[2,20],8:[2,20],9:[2,20],16:[2,20],25:[2,20],32:[2,20],33:[2,20],34:[2,20],35:[2,20],39:[2,20],40:[2,20],41:[2,20]},{4:40,6:3,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],33:[1,41],34:[1,24],39:[1,26],41:[1,25],44:[1,29],45:[1,30],48:[1,31],49:[1,32],50:[1,33],53:[1,34],54:[1,35],55:[1,36],60:[1,37],63:[1,38],64:[1,39]},{4:42,6:3,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],34:[1,24],35:[1,43],39:[1,26],41:[1,25]},{7:[1,44]},{7:[1,48],8:[1,50],23:49,36:47,38:45,40:[1,46],41:[1,25]},{1:[2,1]},{5:[2,26],7:[2,26],8:[2,26],9:[2,26],16:[2,26],25:[2,26],32:[2,26],33:[2,26],34:[2,26],35:[2,26],39:[2,26],41:[2,26]},{32:[1,52],43:51},{4:53,6:3,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],34:[1,24],39:[1,26],41:[1,25]},{32:[1,56],46:55,47:54},{7:[1,57]},{6:58,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],34:[1,24],39:[1,26],41:[1,25]},{32:[1,59]},{32:[1,60]},{7:[1,62],26:61},{6:63,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],34:[1,24],39:[1,26],41:[1,25]},{7:[1,62],26:64},{7:[1,62],26:65},{6:28,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],33:[1,66],34:[1,24],39:[1,26],41:[1,25]},{5:[2,29],7:[2,29],8:[2,29],9:[2,29],16:[2,29],25:[2,29],32:[2,29],33:[2,29],34:[2,29],35:[2,29],39:[2,29],40:[2,29],41:[2,29]},{6:28,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],34:[1,24],35:[1,67],39:[1,26],41:[1,25]},{5:[2,31],7:[2,31],8:[2,31],9:[2,31],16:[2,31],25:[2,31],32:[2,31],33:[2,31],34:[2,31],35:[2,31],39:[2,31],40:[2,31],41:[2,31]},{5:[2,39],7:[2,39],8:[2,39],9:[2,39],16:[2,39],25:[2,39],32:[2,39],33:[2,39],34:[2,39],35:[2,39],37:[2,39],39:[2,39],40:[2,39],41:[2,39]},{7:[1,48],8:[1,50],23:49,36:69,40:[1,68],41:[1,25]},{5:[2,38],7:[2,38],8:[2,38],9:[2,38],16:[2,38],25:[2,38],32:[2,38],33:[2,38],34:[2,38],35:[2,38],39:[2,38],40:[2,38],41:[2,38]},{7:[2,36],8:[2,36],40:[2,36],41:[2,36]},{37:[1,70]},{37:[1,71]},{37:[1,72]},{4:73,6:3,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],34:[1,24],39:[1,26],41:[1,25]},{7:[1,75],42:74},{6:28,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],33:[1,76],34:[1,24],39:[1,26],41:[1,25]},{32:[1,56],33:[1,77],46:78},{32:[2,46],33:[2,46]},{6:79,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],34:[1,24],39:[1,26],41:[1,25]},{6:80,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],34:[1,24],39:[1,26],41:[1,25]},{6:81,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],34:[1,24],39:[1,26],41:[1,25]},{32:[1,85],33:[1,82],51:84,52:83},{32:[1,85],33:[1,86],51:84,52:87},{6:88,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],34:[1,24],39:[1,26],41:[1,25]},{7:[2,21],8:[2,21],9:[2,21],16:[2,21],25:[2,21],32:[2,21],34:[2,21],39:[2,21],41:[2,21]},{32:[1,91],56:90,59:89},{6:92,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],34:[1,24],39:[1,26],41:[1,25]},{6:93,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],34:[1,24],39:[1,26],41:[1,25]},{5:[2,28],7:[2,28],8:[2,28],9:[2,28],16:[2,28],25:[2,28],32:[2,28],33:[2,28],34:[2,28],35:[2,28],39:[2,28],40:[2,28],41:[2,28]},{5:[2,30],7:[2,30],8:[2,30],9:[2,30],16:[2,30],25:[2,30],32:[2,30],33:[2,30],34:[2,30],35:[2,30],39:[2,30],40:[2,30],41:[2,30]},{5:[2,37],7:[2,37],8:[2,37],9:[2,37],16:[2,37],25:[2,37],32:[2,37],33:[2,37],34:[2,37],35:[2,37],39:[2,37],40:[2,37],41:[2,37]},{7:[2,35],8:[2,35],40:[2,35],41:[2,35]},{6:94,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],34:[1,24],39:[1,26],41:[1,25]},{6:95,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],34:[1,24],39:[1,26],41:[1,25]},{6:96,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],34:[1,24],39:[1,26],41:[1,25]},{6:28,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],33:[1,97],34:[1,24],39:[1,26],41:[1,25]},{7:[1,99],33:[1,98]},{7:[2,40],33:[2,40]},{5:[2,44],7:[2,44],8:[2,44],9:[2,44],16:[2,44],25:[2,44],32:[2,44],33:[2,44],34:[2,44],35:[2,44],39:[2,44],40:[2,44],41:[2,44]},{5:[2,48],7:[2,48],8:[2,48],9:[2,48],16:[2,48],25:[2,48],32:[2,48],33:[2,48],34:[2,48],35:[2,48],39:[2,48],40:[2,48],41:[2,48]},{32:[2,47],33:[2,47]},{6:100,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],34:[1,24],39:[1,26],41:[1,25]},{33:[1,101]},{6:102,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],34:[1,24],39:[1,26],41:[1,25]},{4:103,6:3,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],34:[1,24],39:[1,26],41:[1,25]},{32:[1,85],33:[1,104],51:105},{32:[2,52],33:[2,52]},{7:[1,62],26:106},{4:107,6:3,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],34:[1,24],39:[1,26],41:[1,25]},{32:[1,85],33:[1,108],51:105},{6:110,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],33:[1,109],34:[1,24],39:[1,26],41:[1,25]},{32:[1,113],56:112,57:111},{32:[2,62]},{6:114,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],34:[1,24],39:[1,26],41:[1,25]},{33:[1,115]},{4:116,6:3,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],34:[1,24],39:[1,26],41:[1,25]},{7:[2,32],8:[2,32],40:[2,32],41:[2,32]},{7:[2,33],8:[2,33],40:[2,33],41:[2,33]},{7:[2,34],8:[2,34],40:[2,34],41:[2,34]},{5:[2,43],7:[2,43],8:[2,43],9:[2,43],16:[2,43],25:[2,43],32:[2,43],33:[2,43],34:[2,43],35:[2,43],39:[2,43],40:[2,43],41:[2,43]},{7:[2,42],8:[2,42],9:[2,42],16:[2,42],25:[2,42],32:[2,42],34:[2,42],39:[2,42],41:[2,42]},{7:[2,41],33:[2,41]},{33:[1,117]},{5:[2,49],7:[2,49],8:[2,49],9:[2,49],16:[2,49],25:[2,49],32:[2,49],33:[2,49],34:[2,49],35:[2,49],39:[2,49],40:[2,49],41:[2,49]},{33:[1,118]},{6:28,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],33:[1,119],34:[1,24],39:[1,26],41:[1,25]},{4:120,6:3,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],34:[1,24],39:[1,26],41:[1,25]},{32:[2,53],33:[2,53]},{6:121,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],34:[1,24],39:[1,26],41:[1,25]},{6:28,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],33:[1,122],34:[1,24],39:[1,26],41:[1,25]},{4:123,6:3,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],34:[1,24],39:[1,26],41:[1,25]},{5:[2,58],7:[2,58],8:[2,58],9:[2,58],16:[2,58],25:[2,58],32:[2,58],33:[2,58],34:[2,58],35:[2,58],39:[2,58],40:[2,58],41:[2,58]},{33:[1,124]},{33:[1,125]},{32:[2,63]},{6:114,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],34:[1,24],39:[1,26],41:[1,25],58:[1,126]},{6:127,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],34:[1,24],39:[1,26],41:[1,25]},{5:[2,66],7:[2,66],8:[2,66],9:[2,66],16:[2,66],25:[2,66],32:[2,66],33:[2,66],34:[2,66],35:[2,66],39:[2,66],40:[2,66],41:[2,66]},{6:28,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],33:[1,128],34:[1,24],39:[1,26],41:[1,25]},{32:[2,45],33:[2,45]},{5:[2,50],7:[2,50],8:[2,50],9:[2,50],16:[2,50],25:[2,50],32:[2,50],33:[2,50],34:[2,50],35:[2,50],39:[2,50],40:[2,50],41:[2,50]},{5:[2,54],7:[2,54],8:[2,54],9:[2,54],16:[2,54],25:[2,54],32:[2,54],33:[2,54],34:[2,54],35:[2,54],39:[2,54],40:[2,54],41:[2,54]},{6:28,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],33:[1,129],34:[1,24],39:[1,26],41:[1,25]},{33:[1,130]},{5:[2,56],7:[2,56],8:[2,56],9:[2,56],16:[2,56],25:[2,56],32:[2,56],33:[2,56],34:[2,56],35:[2,56],39:[2,56],40:[2,56],41:[2,56]},{6:28,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],33:[1,131],34:[1,24],39:[1,26],41:[1,25]},{5:[2,59],7:[2,59],8:[2,59],9:[2,59],16:[2,59],25:[2,59],32:[2,59],33:[2,59],34:[2,59],35:[2,59],39:[2,59],40:[2,59],41:[2,59]},{5:[2,64],7:[2,64],8:[2,64],9:[2,64],16:[2,64],25:[2,64],32:[2,64],33:[2,64],34:[2,64],35:[2,64],39:[2,64],40:[2,64],41:[2,64]},{6:132,7:[1,4],8:[1,5],9:[1,6],10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,22],32:[1,23],34:[1,24],39:[1,26],41:[1,25]},{33:[1,133]},{5:[2,67],7:[2,67],8:[2,67],9:[2,67],16:[2,67],25:[2,67],32:[2,67],33:[2,67],34:[2,67],35:[2,67],39:[2,67],40:[2,67],41:[2,67]},{5:[2,55],7:[2,55],8:[2,55],9:[2,55],16:[2,55],25:[2,55],32:[2,55],33:[2,55],34:[2,55],35:[2,55],39:[2,55],40:[2,55],41:[2,55]},{32:[2,51],33:[2,51]},{5:[2,57],7:[2,57],8:[2,57],9:[2,57],16:[2,57],25:[2,57],32:[2,57],33:[2,57],34:[2,57],35:[2,57],39:[2,57],40:[2,57],41:[2,57]},{33:[1,134]},{32:[2,60]},{33:[2,61]}],
defaultActions: {27:[2,1],90:[2,62],112:[2,63],133:[2,60],134:[2,61]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    function mkNode(type, val, start, end){
        return {
            "type": type,
            "value": val,
            "start": start,
            "end": end
        };
    }

    function mkSpecial(type, vals, start, end){
        var toReturn =  {
            "type": type,
            "start": start,
            "end": end
        }
        for(key in vals){
            toReturn[key] = vals[key];
        }
        return toReturn;
    }

    function mkPair(v1, v2){
        return {
            "v1": v1,
            "v2": v2
        };
    }

    function emptyList(){
        return [];
    }

    function emptyObj(){
        return {};
    }
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2: return 32; 
break;
case 3: return 33; 
break;
case 4: return 34; 
break;
case 5: return 35; 
break;
case 6: return 39; 
break;
case 7: return 40; 
break;
case 8: return 37; 
break;
case 9: return 41; 
break;
case 10: return 63;
break;
case 11: return 44;   
break;
case 12: return 45;    
break;
case 13: return 48;     
break;
case 14: return 49;   
break;
case 15: return 50;       
break;
case 16: return 53;      
break;
case 17: return 54;   
break;
case 18: return 55;      
break;
case 19: return 60;   
break;
case 20: return 62;    
break;
case 21: return 58; 
break;
case 22: return 'RESERVED'; 
break;
case 23: return 'RESERVED'; 
break;
case 24: return 'RESERVED'; 
break;
case 25: return 'RESERVED'; 
break;
case 26: return 'RESERVED'; 
break;
case 27: return 'RESERVED'; 
break;
case 28: return 'RESERVED'; 
break;
case 29: return 'RESERVED'; 
break;
case 30: return 'RESERVED'; 
break;
case 31: return 'RESERVED'; 
break;
case 32: return 'RESERVED'; 
break;
case 33: return 'RESERVED'; 
break;
case 34: return 'RESERVED'; 
break;
case 35: return 'RESERVED'; 
break;
case 36: return 'RESERVED'; 
break;
case 37: return 'RESERVED'; 
break;
case 38: return 'RESERVED'; 
break;
case 39: return 'RESERVED'; 
break;
case 40: return 'RESERVED'; 
break;
case 41: return 'RESERVED'; 
break;
case 42: return 'RESERVED'; 
break;
case 43: return 'RESERVED'; 
break;
case 44: return 'RESERVED'; 
break;
case 45: return 'RESERVED'; 
break;
case 46: return 'RESERVED'; 
break;
case 47: return 'RESERVED'; 
break;
case 48: return 'RESERVED'; 
break;
case 49: return 'RESERVED'; 
break;
case 50: return 'RESERVED'; 
break;
case 51: return 'RESERVED'; 
break;
case 52: return 'RESERVED'; 
break;
case 53: return 'RESERVED'; 
break;
case 54: return 'RESERVED'; 
break;
case 55: return 'RESERVED'; 
break;
case 56: return 'RESERVED'; 
break;
case 57: return 'RESERVED'; 
break;
case 58: return 'RESERVED'; 
break;
case 59: return 'RESERVED'; 
break;
case 60: return 'RESERVED'; 
break;
case 61: return 'RESERVED'; 
break;
case 62: return 'RESERVED'; 
break;
case 63: return 'RESERVED'; 
break;
case 64: return 'RESERVED'; 
break;
case 65: return 'RESERVED'; 
break;
case 66: return 'RESERVED'; 
break;
case 67: return 'RESERVED'; 
break;
case 68: return 'RESERVED'; 
break;
case 69: return 'RESERVED'; 
break;
case 70: return 'RESERVED'; 
break;
case 71: return 'RESERVED'; 
break;
case 72: return 'RESERVED'; 
break;
case 73: return 9;        
break;
case 74: return 9;        
break;
case 75: return 8;        
break;
case 76: return 7;         
break;
case 77: return 25; 
break;
case 78: return 64; 
break;
case 79: return 5; 
break;
}
},
rules: [/^(?:\s)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:')/,/^(?:#)/,/^(?:lambda\b)/,/^(?:begin\b)/,/^(?:cond\b)/,/^(?:define\b)/,/^(?:if\b)/,/^(?:let\b)/,/^(?:letrec\b)/,/^(?:set\b)/,/^(?:switch\b)/,/^(?:thunk\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:case\b)/,/^(?:catch\b)/,/^(?:continue\b)/,/^(?:debugger\b)/,/^(?:delete\b)/,/^(?:do\b)/,/^(?:else\b)/,/^(?:finally\b)/,/^(?:for\b)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:in\b)/,/^(?:instanceof\b)/,/^(?:new\b)/,/^(?:return\b)/,/^(?:switch\b)/,/^(?:this\b)/,/^(?:throw\b)/,/^(?:try\b)/,/^(?:typeof\b)/,/^(?:var\b)/,/^(?:void\b)/,/^(?:while\b)/,/^(?:with\b)/,/^(?:class\b)/,/^(?:enum\b)/,/^(?:export\b)/,/^(?:extends\b)/,/^(?:import\b)/,/^(?:super\b)/,/^(?:implements\b)/,/^(?:interface\b)/,/^(?:let\b)/,/^(?:package\b)/,/^(?:private\b)/,/^(?:protected\b)/,/^(?:public\b)/,/^(?:static\b)/,/^(?:yield\b)/,/^(?:macro\b)/,/^(?:compe\b)/,/^(?:defmacro\b)/,/^(?:yield\b)/,/^(?:yield\b)/,/^(?:yield\b)/,/^(?:yield\b)/,/^(?:yield\b)/,/^(?:yield\b)/,/^(?:yield\b)/,/^(?:yield\b)/,/^(?:[0-9]+\.[0-9]+([Ee][+-]?[0-9]+)?)/,/^(?:[0-9]+)/,/^(?:L?"(\\.|[^\\"])*")/,/^(?:[$_a-zA-Z](\.?[$_a-zA-Z0-9]+)*)/,/^(?:[^(){}[\], :.']+)/,/^(?:\.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}